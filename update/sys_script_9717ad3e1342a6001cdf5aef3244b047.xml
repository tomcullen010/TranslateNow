<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_snc_message_tran_message_translator_table</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Translate Messages</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	//
	// Pulled from the UI Action. Added a try/catch
	//
	
	var msgCount = 0;
	var dupCount = 0;
	var toLanguage = current.current_languages.id.toString(); 
	var toLanguageX = toLanguage + "_" + current.sys_id.toString();       
	
	
	try {
		if (translateTableData())
			current.result = "Success";
		else
			current.result = "Error";
		new global.TranslatorHelper().sleepTimer(5000); // TEST
	}
	catch (err) {
		
	}
	current.state = "Review";
	current.setWorkflow(false);
	current.message_log =  msgCount + " messages translated from English to " + toLanguage + ".\n" +
	"Please review and approve for accuracy.";
	if (current.result == "Error")
		current.message_log += "Note however that translations encountered an Error! " +
	"Have an admin investigate the system logs.";
	
	current.update();
	
	function translateTableData() {
		
		var returnCode = true; // success
		var gr = new GlideRecord(current.translation_tables);
		gr.addQuery('language', 'en');
		gr.addEncodedQuery(current.condition_buffer);
		gr.query();                                          // loop thru the records to translate
		while (gr.next()) {
			if (!translationExists(gr, toLanguage)) {
				if (!translateRec(gr, toLanguage, toLanguageX))
					returnCode = false;
				msgCount++;
			}
		}
		return returnCode;
	}
	
})(current, previous);




function translationExists(currRec, toLanguage) {
	
	
	// Keys that uniquely identify a translation
	//
	//   For all, language and ...
	//
	//   Messages (sys_ui_message) - key
	//   Translated Name/Fields (sys_translated) -  element, value
	//   Field Labels (sys_documentation) - name, element
	//   Choices (sys_choice) - name, element, value
	//   Translated Texts (sys_translated_text) - tablename, fieldname, documentkey
	
	var abort = false;
	var searchRec = new GlideRecord(currRec.getRecordClassName());
	searchRec.addQuery('language', toLanguage);
	switch (currRec.getRecordClassName()) {
		case "sys_ui_message":
		searchRec.addQuery('key', currRec.key);
		break;
		case "sys_translated":
		searchRec.addQuery('element', currRec.element);	
		searchRec.addQuery('value', currRec.value);
		break;
		case "sys_documentation":
		searchRec.addQuery('name', currRec.name);               
		searchRec.addQuery('element', currRec.element);
		break;
		case "sys_choice":
		searchRec.addQuery('name', currRec.name);
		searchRec.addQuery('element', currRec.element);
		searchRec.addQuery('value', currRec.value);
		break;
		case "sys_translated_text":
		searchRec.addQuery('documentkey', currRec.documentkey);	
		searchRec.addQuery('fieldname', currRec.fieldname);
    	var query = searchRec.addQuery('documentkey', currRec.documentkey);    //ask Dave about these fields ...
	    query.addOrCondition('tablename', currRec.tablename);
		break;
		default:
		abort = true;
		gs.error("Unknown translation table type: " + current.translation_tables);
		break;
	}
	
	if (abort) {
		return true; // stop processing on this error condition
	}
	
	searchRec.query();
	if (searchRec.hasNext()) {
		gs.info('Duplicate key found .. skipping this record');
		dupCount++;
		return true;
	}
	
	return false;
	
}

function translateRec(currRec, toLanguage, toLanguageX) {
	
	gs.info("Translating " + toLanguageX);
	
	var returnCode = true;
	
	try {
		
		//
		// Required field translations...
		//
		//   Messages (sys_ui_message) - message
		//   Translated Name/Fields (sys_translated) - label
		//   Field Labels (sys_documentation) - label, plural, help, hint
		//   Choices (sys_choice) - label, hint
		//   Translated Texts (sys_translated_text) - value
		//
		// All 5 translation records use the same language field - language
		//
		
		var gt = new global.GoogleTranslate();
		var abort = false;
		
		switch (current.translation_tables.toString()) {
			// TODO: make 'from langauge' a variable
			case "sys_ui_message":
			currRec.message = gt.translate(toLanguage, currRec.message, "en");
			currRec.sys_name = gt.translate(toLanguage, currRec.sys_name, "en");	
			break;
			case "sys_translated":
			currRec.label = gt.translate(toLanguage, currRec.label, "en");
			break;
			case "sys_documentation":
			currRec.label = gt.translate(toLanguage, currRec.label, "en");
			currRec.plural = gt.translate(toLanguage, currRec.plural, "en");
			currRec.help = gt.translate(toLanguage, currRec.help, "en");
			currRec.hint = gt.translate(toLanguage, currRec.hint, "en");
			currRec.sys_name = gt.translate(toLanguage, currRec.sys_name, "en");
			break;
			case "sys_choice":
			currRec.label = gt.translate(toLanguage, currRec.label, "en");
			currRec.hint = gt.translate(toLanguage, currRec.hint, "en");
			break;
			case "sys_translated_text":
			currRec.value = gt.translate(toLanguage, currRec.value, "en");
			break;
			default:
			abort = true;
			gs.error("Unknown translation table type: " + current.translation_tables);
			break;
		}
		
		if (!abort) {
			currRec.language = "XX";
			currRec.u_translation_log_id = toLanguageX;
			var newRec = currRec.insert();
		}
		else {
			returnCode = false;
		}
		
	}
	catch (error) {
		returnCode = false;
		gs.error(error);
	}
	return returnCode; // Returns true on success, false on any error.
}



//function translate() {
//	return "All work and no play makes Dave a dull boy.  Tom is already dull.";	
//}


					
					
					
					]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-09-27 17:17:44</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>9717ad3e1342a6001cdf5aef3244b047</sys_id>
        <sys_mod_count>109</sys_mod_count>
        <sys_name>Translate Messages</sys_name>
        <sys_overrides/>
        <sys_package display_value="Message Translator" source="x_snc_message_tran">c417988c13cea2001cdf5aef3244b0a8</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Message Translator">c417988c13cea2001cdf5aef3244b0a8</sys_scope>
        <sys_update_name>sys_script_9717ad3e1342a6001cdf5aef3244b047</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-10-06 09:12:29</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=9717ad3e1342a6001cdf5aef3244b047"/>
</record_update>
